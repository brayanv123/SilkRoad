#BlueJ class context
comment0.target=SilkRoad
comment0.text=\r\n\ The\ {@code\ SilkRoad}\ class\ represents\ a\ system\ that\ manages\r\n\ a\ spiral-shaped\ road\ with\ {@link\ Robot}\ and\ {@link\ Store}\ objects\r\n\ placed\ along\ its\ path.\r\n\ \r\n\ <p>It\ allows\ adding\ and\ removing\ robots\ and\ stores\ at\ specific\r\n\ locations,\ moving\ robots\ along\ the\ spiral,\ resupplying\ stores,\r\n\ rebooting\ robots,\ and\ calculating\ the\ total\ profit\ in\ terms\ of\ tenges.</p>\r\n\ \r\n\ <p>The\ road\ is\ internally\ represented\ using\ a\ {@link\ SpiralRoad}\ object,\r\n\ and\ robots/stores\ are\ tracked\ in\ both\ lists\ and\ {@link\ TreeMap}\ structures\r\n\ for\ efficient\ access\ by\ location.</p>\r\n\ \r\n\ <p>Once\ the\ system\ is\ marked\ as\ finished,\ no\ further\ modifications\r\n\ to\ robots\ or\ stores\ can\ be\ made.</p>\r\n\ \r\n\ @author\ Brayan\ Valdes\ -\ Yan\ Guerra\r\n\ @version\ 17/09/2025\r\n
comment1.params=length
comment1.target=SilkRoad(int)
comment1.text=\r\n\ Creates\ a\ {@code\ SilkRoad}\ of\ the\ specified\ length.\r\n\ \r\n\ @param\ length\ the\ number\ of\ positions\ (rectangles)\ in\ the\ spiral\ road.\r\n
comment10.params=
comment10.target=void\ resuplyStores()
comment10.text=\r\n\ Restores\ all\ stores\ to\ their\ initial\ amount\ of\ tenges.\r\n
comment11.params=
comment11.target=void\ returnRobots()
comment11.text=\r\n\ Returns\ all\ robots\ to\ their\ initial\ positions.\r\n
comment12.params=
comment12.target=void\ reboot()
comment12.text=\r\n\ Reboots\ the\ entire\ road,\ resupplying\ stores\ and\ returning\ robots.\r\n
comment13.params=
comment13.target=int\ profit()
comment13.text=\r\n\ Calculates\ the\ total\ profit\ by\ summing\ the\ tenges\r\n\ of\ all\ robots\ currently\ on\ the\ road.\r\n\r\n\ @return\ the\ total\ tenges\ held\ by\ all\ robots.\r\n
comment14.params=
comment14.target=stores()
comment14.text=\r\n\ Returns\ a\ list\ of\ stores\ with\ their\ positions\ and\ tenges.\r\n\r\n\ @return\ an\ {@code\ ArrayList}\ of\ int\ arrays\ {location,\ tenges}.\r\n
comment15.params=
comment15.target=emptiedStores()
comment15.text=\r\n\ Returns\ a\ list\ of\ all\ stores\ that\ have\ been\ emptied\ at\ least\ once.\r\n\ <p>\r\n\ Each\ element\ in\ the\ returned\ list\ is\ an\ {@code\ int[]}\ array\ containing\:\r\n\ <ul>\r\n\ \ \ <li><b>index\ 0\:</b>\ the\ store\u2019s\ position\ (key\ in\ {@code\ mapStores})</li>\r\n\ \ \ <li><b>index\ 1\:</b>\ the\ number\ of\ times\ the\ store\ has\ been\ emptied</li>\r\n\ </ul>\r\n\ Only\ stores\ whose\ {@code\ getTimes()}\ value\ is\ greater\ than\ zero\ \r\n\ (meaning\ they\ were\ visited\ and\ emptied\ by\ a\ robot)\ are\ included.\r\n\ </p>\r\n\r\n\ @return\ an\ {@code\ ArrayList<int[]>}\ where\ each\ element\ represents\ \r\n\ \ \ \ \ \ \ \ \ a\ store\ position\ and\ the\ number\ of\ times\ it\ was\ emptied.\r\n
comment16.params=
comment16.target=robots()
comment16.text=\r\n\ Returns\ a\ list\ of\ robots\ with\ their\ positions\ and\ tenges.\r\n\r\n\ @return\ an\ {@code\ ArrayList}\ of\ int\ arrays\ {location,\ tenges}.\r\n
comment17.params=
comment17.target=void\ makeVisible()
comment17.text=\r\n\ Makes\ the\ entire\ road\ visible,\ including\ the\ spiral,\r\n\ stores,\ and\ robots.\r\n
comment18.params=
comment18.target=void\ makeInvisible()
comment18.text=\r\n\ Makes\ the\ entire\ road\ invisible,\ including\ the\ spiral,\r\n\ stores,\ and\ robots.\r\n
comment19.params=
comment19.target=void\ finis()
comment19.text=\r\n\ Finalizes\ the\ SilkRoad\ system\ by\ clearing\ all\ robots\ and\ stores,\r\n\ resetting\ the\ spiral,\ and\ marking\ the\ road\ as\ finished.\r\n
comment2.params=days
comment2.target=SilkRoad(int[][])
comment20.params=
comment20.target=boolean\ ok()
comment20.text=\r\n\ Checks\ if\ all\ stores\ are\ empty\ (no\ tenges\ left).\r\n\r\n\ @return\ {@code\ true}\ if\ all\ stores\ are\ empty,\r\n\ \ \ \ \ \ \ \ \ {@code\ false}\ otherwise.\r\n
comment3.params=location\ tenges
comment3.target=void\ pleaseStore(int,\ int)
comment3.text=\r\n\ Places\ a\ store\ at\ the\ specified\ location\ with\ an\ initial\ amount\ of\ tenges.\r\n\r\n\ @param\ location\ the\ location\ index\ on\ the\ road.\r\n\ @param\ tenges\ \ \ the\ initial\ tenges\ for\ the\ store.\r\n
comment4.params=location
comment4.target=void\ removeStore(int)
comment4.text=\r\n\ Removes\ the\ store\ located\ at\ the\ specified\ position.\r\n\r\n\ @param\ location\ the\ location\ index\ on\ the\ road.\r\n
comment5.params=location
comment5.target=void\ pleaseRobot(int)
comment5.text=\r\n\ Places\ a\ robot\ at\ the\ specified\ location\ with\ an\ initial\ amount\ of\ tenges.\r\n\r\n\ @param\ location\ the\ location\ index\ on\ the\ road.\r\n\ @param\ tenges\ \ \ the\ initial\ tenges\ for\ the\ robot.\r\n
comment6.params=location
comment6.target=void\ removeRobot(int)
comment6.text=\r\n\ Removes\ the\ robot\ located\ at\ the\ specified\ position.\r\n\r\n\ @param\ location\ the\ location\ index\ on\ the\ road.\r\n
comment7.params=location\ meters
comment7.target=void\ moveRobot(int,\ int)
comment7.text=\r\n\ Moves\ a\ robot\ from\ its\ current\ location\ to\ a\ new\ location,\r\n\ consuming\ tenges\ equal\ to\ the\ distance\ traveled.\r\n\ If\ the\ new\ location\ has\ a\ store,\ the\ robot\ collects\ its\ tenges.\r\n\r\n\ @param\ location\ the\ current\ location\ of\ the\ robot.\r\n\ @param\ meters\ \ \ the\ number\ of\ positions\ to\ move\ forward.\r\n
comment8.params=
comment8.target=void\ moveRobots()
comment8.text=\r\n\ Moves\ all\ robots\ along\ the\ Silk\ Road\ according\ to\ the\ profit\ they\ can\ obtain\ from\ nearby\ stores.\r\n\ <p>\r\n\ For\ each\ robot\ in\ {@code\ mapRobots},\ the\ method\ evaluates\ every\ store\ in\ {@code\ mapStores}\ \r\n\ to\ determine\ whether\ moving\ to\ that\ store\ is\ profitable.\ \r\n\ The\ profit\ is\ calculated\ as\:\r\n\ </p>\r\n\ \r\n\ <pre>\r\n\ profit\ \=\ storeTenges\ -\ |robotPosition\ -\ storePosition|\r\n\ </pre>\r\n\ \r\n\ <p>\r\n\ If\ the\ profit\ is\ positive,\ the\ robot\ moves\ toward\ that\ store\ by\ the\ required\ distance.\r\n\ The\ movement\ is\ performed\ by\ invoking\ {@code\ moveRobot(currentPosition,\ distance)}.\r\n\ </p>\r\n\ \r\n\ <p><b>Logic\ summary\:</b></p>\r\n\ <ul>\r\n\ \ \ <li>Iterates\ through\ all\ robots\ stored\ in\ {@code\ mapRobots}.</li>\r\n\ \ \ <li>For\ each\ robot,\ checks\ every\ store\ in\ {@code\ mapStores}.</li>\r\n\ \ \ <li>Computes\ the\ movement\ cost\ and\ net\ profit.</li>\r\n\ \ \ <li>If\ the\ profit\ is\ positive,\ moves\ the\ robot\ to\ the\ store's\ position.</li>\r\n\ \ \ <li>Updates\ the\ robot\u2019s\ new\ position\ after\ the\ movement.</li>\r\n\ </ul>\r\n\r\n\ <p><b>Note\:</b>\ The\ method\ assumes\ that\ {@code\ moveRobot()}\ handles\ the\ actual\ \r\n\ position\ update,\ store\ collection,\ and\ internal\ state\ consistency\ of\ both\ \r\n\ robots\ and\ stores.</p>\r\n\r\n\ @see\ \#moveRobot(int,\ int)\r\n
comment9.params=
comment9.target=int[][]\ profitPerMove()
comment9.text=\r\n\ Returns\ a\ 2D\ array\ representing\ the\ profit\ collected\ by\ each\ robot\ per\ move.\r\n\ <p>\r\n\ Each\ row\ in\ the\ returned\ array\ corresponds\ to\ a\ single\ robot\ and\ contains\:\r\n\ <ul>\r\n\ \ \ <li><b>index\ 0\:</b>\ the\ robot\u2019s\ current\ position\ (key\ in\ {@code\ profitPerMove})</li>\r\n\ \ \ <li><b>index\ 1\:</b>\ the\ profit\ gained\ in\ the\ first\ move</li>\r\n\ \ \ <li><b>index\ 2\:</b>\ the\ profit\ gained\ in\ the\ second\ move</li>\r\n\ </ul>\r\n\ The\ method\ iterates\ through\ the\ {@code\ profitPerMove}\ map,\ which\ stores\ \r\n\ each\ robot\u2019s\ profits\ across\ movements,\ and\ converts\ it\ into\ a\ two-dimensional\ array.\r\n\ </p>\r\n\r\n\ @return\ a\ 2D\ integer\ array\ where\ each\ row\ represents\ a\ robot\ and\ its\ profits\ per\ move.\r\n
numComments=21
